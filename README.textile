h1. rah_autoload

p. "Packagist":https://packagist.org/packages/rah/rah_autoload | "Twitter":http://twitter.com/gocom | "GitHub":https://github.com/gocom/rah_autoload | "Donate":http://rahforum.biz/donate/rah_autoload

p. This "Textpattern CMS":http://textpattern.com plugin loads the autoload file generated by "Composer":http://getcomposer.org dependency manager. Fits well together with "textpattern/installer":https://packagist.org/packages/textpattern/installer and "textpattern/lock":https://packagist.org/packages/textpattern/installer to complete the Textpattern and Composer integration. This plugin removes any need to manually import the autoload file, and allows plugins access their dependencies.

h2. Installing

p. Using "Composer":http://getcomposer.org:

bc. $ composer.phar require rah/rah_autoload

h2. Using in your plugins

p. To use rah_autoload with your Composer distributed plugins, just add it as a dependency to your @composer.json@:

bc. {
	"require": {
		"rah/rah_autoload": "*"
	}
}

p. And that's it. Rah_autoload gets installed with your plugin, the autoload file is loaded in Textpattern and you can access your dependencies.

h2. Invoking the autoloader

p. The plugin and autoloader is invoked automatically as long as the plugin is enabled, but the autoloader can be invoked manually too, once installed. Normally this isn't required, but if you want to make sure autoloader is initialized before you try to access the your dependencies, you may invoke the plugin by our own in your plugin.

p. You will be able to invoke the autoloader like any other plugin using Textpattern's native plugin management functions such as @load_plugin()@ and @require_plugin()@. You don't need to do anything else.

bc. load_plugin('rah_autoload', true);

p. The above will initialize the autoloader as long as its installed, regardless of its type or status. The plugin and autoloader is initialized only once, and even then only when needed. Subsequent load and require statements don't have any impact or eat resources. This basically means you can safely "spam" the @load_plugin()@ when ever you need an autoloader or class maps generated by Composer.

h2. Changelog

h3. Version 0.1.0 - 2013/05/08

* Initial release.